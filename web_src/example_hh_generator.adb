--
--  $Author: graham_s $
--  $Date: 2007-03-20 18:07:20 +0000 (Tue, 20 Mar 2007) $
--  $Revision: 2398 $
--
with Templates_Parser;
with user;
with legal_aid_runner;      use legal_aid_runner;
with base_model_types;      use base_model_types;
with model_household;       use model_household;
with model_output;          use model_output;
with legal_aid_web_commons; use legal_aid_web_commons;
with Ada.Calendar;          use Ada.Calendar;
with legal_aid_runner;
with format_utils;          use format_utils;
with FRS_Enums;

package body example_hh_generator is

   use type Templates_Parser.Vector_Tag;

   NUM_DISPLAYED_BENEFIT_UNITS : constant := 3;
   NUM_DISPLAYED_SYSTEMS       : constant := 2;

   type Parser_Tag_Array is
     array (1 .. NUM_DISPLAYED_BENEFIT_UNITS, 1 .. NUM_DISPLAYED_SYSTEMS) of Templates_Parser.Tag;

   procedure make_example_translations_table
     (mhh                   : Model_Household_Rec;
      output                : legal_aid_runner.Model_Outputs;
      trans                 : in out LA_Translate_Table;
      insert_Start_Position : Integer)
   is
      expenses_values, income_values, finance_values, expenses_titles, finance_titles, income_titles: Parser_Tag_Array;
      diff : money;

      tablePos : Integer := insert_Start_Position;
   begin
      -- ======= autogenerated ==
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("mhh-sernum", mhh.sernum);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc ("mhh-yearinterview_date", Year (mhh.interview_date)'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc ("mhh-monthinterview_date", Month (mhh.interview_date)'Img);

      tablePos := tablePos + 1;

      trans (tablePos) :=
        Templates_Parser.Assoc ("mhh-income-band",
                                FRS_Enums.pretty_print (mhh.income_band));

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc ("mhh-grossing_factor", format_utils.format (mhh.grossing_factor));

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc ("mhh-tenure", FRS_Enums.pretty_print (mhh.tenure));

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc ("mhh-old-region", FRS_Enums.pretty_print (mhh.old_region));

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc ("mhh-acorn", FRS_Enums.pretty_print (mhh.acorn));

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-standard-region",
            FRS_Enums.pretty_print (mhh.standard_region));

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-regional-stratifier",
            FRS_Enums.pretty_print (mhh.regional_stratifier));

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-composition",
            FRS_Enums.pretty_print (mhh.composition));

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-mortgages",
            format_utils.format_with_commas (mhh.housing_costs.mortgages));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-rates",
            format_utils.format_with_commas (mhh.housing_costs.gross_council_tax));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-water_rates",
            format_utils.format_with_commas (mhh.housing_costs.water_rates));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-ground_rent",
            mhh.housing_costs.ground_rent'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-service_charges",
            mhh.housing_costs.service_charges'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-repairs_and_insurance",
            mhh.housing_costs.repairs_And_Insurance'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-rent",
            format_utils.format_with_commas (mhh.housing_costs.rent));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-council_tax_rebates",
            mhh.housing_costs.council_tax_rebates'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-rent_rebates",
            mhh.housing_costs.rent_rebates'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-home_equity",
            mhh.housing_costs.home_equity'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-house_price",
            format_utils.format_with_commas (mhh.housing_costs.house_price));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-housing_Costs-mortgages_outstanding",
            format_utils.format_with_commas (mhh.housing_costs.mortgages_outstanding));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc ("mhh-benefit_units-1-decile", mhh.benefit_units (1).decile'Img);

      tablePos         := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-economic-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).economic_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
        Templates_Parser.Assoc ("mhh-benefit_units-1-bu-type",
                                FRS_Enums.pretty_print (mhh.benefit_units (1).bu_type));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-last-adult",
            mhh.benefit_units (1).last_adult'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-num-children",
            mhh.benefit_units (1).num_children'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-head-age",
            mhh.benefit_units (1).adults (head).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-head-sex",
            mhh.benefit_units (1).adults (head).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-head-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).adults (head).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-head-relToHoH",
            FRS_Enums.pretty_print (mhh.benefit_units (1).adults (head).relToHoH));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-head-is-lodger",
            mhh.benefit_units (1).adults (head).is_lodger'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-head-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (1).adults (head).employment));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-head-has-company-car",
            mhh.benefit_units (1).adults (head).has_company_car'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-head-capital-stock",
            mhh.benefit_units (1).adults (head).capital_stock'Img);

      tablePos := tablePos + 1;

      if (mhh.benefit_units (1).adults (head).finance (loan_repayments) /= 0.0) then
         finance_values (1, 1) := finance_values (1, 1) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (1).adults (head).finance (loan_repayments))
;
         finance_titles (1, 1) := finance_titles (1, 1) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (1).adults (head).finance (fines_and_transfers) /= 0.0) then
         finance_values (1, 1) := finance_values (1, 1) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (1).adults (head).finance (
           fines_and_transfers));
         finance_titles (1, 1) := finance_titles (1, 1) & "Fines And Transfers";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (travel_expenses) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (travel_expenses));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Travel Expenses";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (pension) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (pension));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Pension Contributions";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (avcs) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (avcs));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Avcs";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (union_fees) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (union_fees));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Union Fees";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (friendly_societies) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (
           friendly_societies));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Friendly Socs";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (sports) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (sports));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Sports, etc. Contributions";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (loan_repayments) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (
           loan_repayments));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (medical_insurance) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (
           medical_insurance));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Medical Insurance";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (charities) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (charities));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Charities";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (maintenance_payments) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (
           maintenance_payments));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Maintenance Payments";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (childminding) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (childminding));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Childminding";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (shared_rent) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (shared_rent));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Shared Rent";
      end if;

      if (mhh.benefit_units (1).adults (head).expenses (student_expenses) /= 0.0) then
         expenses_values (1, 1) := expenses_values (1, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (head).expenses (
           student_expenses));
         expenses_titles (1, 1) := expenses_titles (1, 1) & "Student Expenses";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (wages) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (wages));
         income_titles (1, 1) := income_titles (1, 1) & "Wages";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (luncheon_Vouchers) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (luncheon_Vouchers));
         income_titles (1, 1) := income_titles (1, 1) & "Luncheon Vouchers";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (self_Employment) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (self_Employment));
         income_titles (1, 1) := income_titles (1, 1) & "Self Employment";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (investment_Income) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (investment_Income));
         income_titles (1, 1) := income_titles (1, 1) & "Investment Income";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (pensions) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (pensions));
         income_titles (1, 1) := income_titles (1, 1) & "pensions";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (other_Income) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (other_Income));
         income_titles (1, 1) := income_titles (1, 1) & "Other Income";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (income_Tax) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (income_Tax));
         income_titles (1, 1) := income_titles (1, 1) & "Income Tax";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (national_insurance) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           national_insurance));
         income_titles (1, 1) := income_titles (1, 1) & "National Insurance";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (disability_living_allowance) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           disability_living_allowance));
         income_titles (1, 1) := income_titles (1, 1) & "Disability Living Allowance";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (attendance_allowance) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           attendance_allowance));
         income_titles (1, 1) := income_titles (1, 1) & "Attendance Allowance";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (constantattendance_allowance) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           constantattendance_allowance));
         income_titles (1, 1) := income_titles (1, 1) & "Constant Attendance Allowance";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (social_fund) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (social_fund));
         income_titles (1, 1) := income_titles (1, 1) & "Social Fund";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (child_benefit) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (child_benefit));
         income_titles (1, 1) := income_titles (1, 1) & "Child Benefit";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (guaranteed_pension_credit) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           guaranteed_pension_credit));
         income_titles (1, 1) := income_titles (1, 1) & "Guaranteed Pension Credit";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (savings_pension_credit) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           savings_pension_credit));
         income_titles (1, 1) := income_titles (1, 1) & "Savings Pension Credit";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (retirement_pension) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           retirement_pension));
         income_titles (1, 1) := income_titles (1, 1) & "Retirement Pension";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (widows_pensions) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (widows_pensions));
         income_titles (1, 1) := income_titles (1, 1) & "Widows pensions";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (income_support) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (income_support));
         income_titles (1, 1) := income_titles (1, 1) & "Income Support";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (maternity_allowance) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           maternity_allowance));
         income_titles (1, 1) := income_titles (1, 1) & "Maternity Allowance";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (widowed_mothers_allowance) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           widowed_mothers_allowance));
         income_titles (1, 1) := income_titles (1, 1) & "Widowed Mothers Allowance";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (war_disablement_pension) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           war_disablement_pension));
         income_titles (1, 1) := income_titles (1, 1) & "War Disablement Pension";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (war_widow_pension) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (war_widow_pension));
         income_titles (1, 1) := income_titles (1, 1) & "War Widow Pension";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (severe_disability_allowance) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           severe_disability_allowance));
         income_titles (1, 1) := income_titles (1, 1) & "Severe Disability Allowance";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (disabled_persons_tax_credit) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           disabled_persons_tax_credit));
         income_titles (1, 1) := income_titles (1, 1) & "Disabled Persons Tax Credit";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (invalid_care_allowance) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           invalid_care_allowance));
         income_titles (1, 1) := income_titles (1, 1) & "Invalid Care Allowance";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (income_related_jobseekers_allowance) /=
          0.0)
      then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           income_related_jobseekers_allowance));
         income_titles (1, 1) := income_titles (1, 1) & "Income Related Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (contributory_jobseekers_allowance) /=
          0.0)
      then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           contributory_jobseekers_allowance));
         income_titles (1, 1) := income_titles (1, 1) & "Contributory Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (industrial_injury_disablementBenefit) /=
          0.0)
      then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           industrial_injury_disablementBenefit));
         income_titles (1, 1) := income_titles (1, 1) & "Industrial Injury Disablement Benefit";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (incapacity_benefit) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           incapacity_benefit));
         income_titles (1, 1) := income_titles (1, 1) & "Incapacity Benefit";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (working_families_tax_credit) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           working_families_tax_credit));
         income_titles (1, 1) := income_titles (1, 1) & "Working Families Tax Credit";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (new_deal) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (new_deal));
         income_titles (1, 1) := income_titles (1, 1) & "New Deal";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (working_tax_credit) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           working_tax_credit));
         income_titles (1, 1) := income_titles (1, 1) & "Working Tax Credit";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (child_tax_credit) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (child_tax_credit))
;
         income_titles (1, 1) := income_titles (1, 1) & "Child Tax Credit";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (any_other_benefit) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (any_other_benefit));
         income_titles (1, 1) := income_titles (1, 1) & "Any Other Benefit";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (widows_payment) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (widows_payment));
         income_titles (1, 1) := income_titles (1, 1) & "Widows Payment";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (unemployment_redundancy_insurance) /=
          0.0)
      then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           unemployment_redundancy_insurance));
         income_titles (1, 1) := income_titles (1, 1) & "Unemployment Redundancy Insurance";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (winter_fuel_payments) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           winter_fuel_payments));
         income_titles (1, 1) := income_titles (1, 1) & "Winter Fuel Payments";
      end if;


      if (mhh.benefit_units (1).adults (head).incomes (trade_union) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (trade_union));
         income_titles (1, 1) := income_titles (1, 1) & "Trade Union";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (friendly_society_benefits) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           friendly_society_benefits));
         income_titles (1, 1) := income_titles (1, 1) & "Friendly Society Benefits";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (private_sickness_scheme) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           private_sickness_scheme));
         income_titles (1, 1) := income_titles (1, 1) & "Private Sickness Scheme";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (accident_insurance_scheme) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           accident_insurance_scheme));
         income_titles (1, 1) := income_titles (1, 1) & "Accident Insurance Scheme";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (hospital_savings_scheme) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (
           hospital_savings_scheme));
         income_titles (1, 1) := income_titles (1, 1) & "Hospital Savings Scheme";
      end if;

      if (mhh.benefit_units (1).adults (head).incomes (health_insurance) /= 0.0) then
         income_values (1, 1) := income_values (1, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (head).incomes (health_insurance))
;
         income_titles (1, 1) := income_titles (1, 1) & "Health Insurance";
      end if;

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-spouse-age",
            mhh.benefit_units (1).adults (spouse).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-spouse-sex",
            mhh.benefit_units (1).adults (spouse).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-spouse-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).adults (spouse).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-spouse-relToHoH",
            FRS_Enums.pretty_print (mhh.benefit_units (1).adults (spouse).relToHoH));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-spouse-is-lodger",
            mhh.benefit_units (1).adults (spouse).is_lodger'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-spouse-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (1).adults (spouse).employment));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-spouse-has-company-car",
            mhh.benefit_units (1).adults (spouse).has_company_car'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-spouse-capital-stock",
            mhh.benefit_units (1).adults (spouse).capital_stock'Img);

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-spouse-ilo-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (1).adults (spouse).ilo_employment));
      tablePos         := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-spouse-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (1).adults (spouse).employment));
      tablePos         := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-head-ethnic-group",
            FRS_Enums.pretty_print (mhh.benefit_units (1).adults (head).ethnic_group));

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-adults-spouse-ethnic-group",
            FRS_Enums.pretty_print (mhh.benefit_units (1).adults (spouse).ethnic_group));

      tablePos := tablePos + 1;

      if (mhh.benefit_units (1).adults (spouse).finance (loan_repayments) /= 0.0) then
         finance_values (1, 2) := finance_values (1, 2) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (1).adults (spouse).finance (
           loan_repayments));
         finance_titles (1, 2) := finance_titles (1, 2) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (1).adults (spouse).finance (fines_and_transfers) /= 0.0) then
         finance_values (1, 2) := finance_values (1, 2) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (1).adults (spouse).finance (
           fines_and_transfers));
         finance_titles (1, 2) := finance_titles (1, 2) & "Fines And Transfers";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (travel_expenses) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (
           travel_expenses));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Travel Expenses";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (pension) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (pension));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Pension";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (avcs) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (avcs));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Avcs";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (union_fees) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (union_fees));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Union Fees";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (friendly_societies) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (
           friendly_societies));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Friendly Socs";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (sports) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (sports));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Sports";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (loan_repayments) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (
           loan_repayments));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (medical_insurance) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (
           medical_insurance));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Medical Insurance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (charities) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (charities));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Charities";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (maintenance_payments) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (
           maintenance_payments));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Maintenance Payments";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (childminding) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (childminding));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Childminding";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (shared_rent) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (shared_rent));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Shared Rent";
      end if;

      if (mhh.benefit_units (1).adults (spouse).expenses (student_expenses) /= 0.0) then
         expenses_values (1, 2) := expenses_values (1, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (1).adults (spouse).expenses (
           student_expenses));
         expenses_titles (1, 2) := expenses_titles (1, 2) & "Student Expenses";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (wages) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (wages));
         income_titles (1, 2) := income_titles (1, 2) & "Wages";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (luncheon_Vouchers) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           luncheon_Vouchers));
         income_titles (1, 2) := income_titles (1, 2) & "Luncheon Vouchers";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (self_Employment) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (self_Employment));
         income_titles (1, 2) := income_titles (1, 2) & "Self Employment";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (investment_Income) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           investment_Income));
         income_titles (1, 2) := income_titles (1, 2) & "Investment Income";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (pensions) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (pensions));
         income_titles (1, 2) := income_titles (1, 2) & "pensions";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (other_Income) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (other_Income));
         income_titles (1, 2) := income_titles (1, 2) & "Other Income";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (income_Tax) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (income_Tax));
         income_titles (1, 2) := income_titles (1, 2) & "Income Tax";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (national_insurance) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           national_insurance));
         income_titles (1, 2) := income_titles (1, 2) & "National Insurance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (disability_living_allowance) /=
          0.0)
      then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           disability_living_allowance));
         income_titles (1, 2) := income_titles (1, 2) & "Disability Living Allowance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (attendance_allowance) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           attendance_allowance));
         income_titles (1, 2) := income_titles (1, 2) & "Attendance Allowance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (constantattendance_allowance) /=
          0.0)
      then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           constantattendance_allowance));
         income_titles (1, 2) := income_titles (1, 2) & "Constant Attendance Allowance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (social_fund) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (social_fund));
         income_titles (1, 2) := income_titles (1, 2) & "Social Fund";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (child_benefit) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (child_benefit));
         income_titles (1, 2) := income_titles (1, 2) & "Child Benefit";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (guaranteed_pension_credit) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           guaranteed_pension_credit));
         income_titles (1, 2) := income_titles (1, 2) & "Guaranteed Pension Credit";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (savings_pension_credit) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           savings_pension_credit));
         income_titles (1, 2) := income_titles (1, 2) & "Savings Pension Credit";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (retirement_pension) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           retirement_pension));
         income_titles (1, 2) := income_titles (1, 2) & "Retirement Pension";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (widows_pensions) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (widows_pensions));
         income_titles (1, 2) := income_titles (1, 2) & "Widows pensions";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (income_support) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (income_support));
         income_titles (1, 2) := income_titles (1, 2) & "Income Support";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (maternity_allowance) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           maternity_allowance));
         income_titles (1, 2) := income_titles (1, 2) & "Maternity Allowance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (widowed_mothers_allowance) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           widowed_mothers_allowance));
         income_titles (1, 2) := income_titles (1, 2) & "Widowed Mothers Allowance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (war_disablement_pension) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           war_disablement_pension));
         income_titles (1, 2) := income_titles (1, 2) & "War Disablement Pension";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (war_widow_pension) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           war_widow_pension));
         income_titles (1, 2) := income_titles (1, 2) & "War Widow Pension";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (severe_disability_allowance) /=
          0.0)
      then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           severe_disability_allowance));
         income_titles (1, 2) := income_titles (1, 2) & "Severe Disability Allowance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (disabled_persons_tax_credit) /=
          0.0)
      then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           disabled_persons_tax_credit));
         income_titles (1, 2) := income_titles (1, 2) & "Disabled Persons Tax Credit";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (invalid_care_allowance) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           invalid_care_allowance));
         income_titles (1, 2) := income_titles (1, 2) & "Invalid Care Allowance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (income_related_jobseekers_allowance) /=
          0.0)
      then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           income_related_jobseekers_allowance));
         income_titles (1, 2) := income_titles (1, 2) & "Income Related Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (contributory_jobseekers_allowance) /=
          0.0)
      then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           contributory_jobseekers_allowance));
         income_titles (1, 2) := income_titles (1, 2) & "Contributory Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (industrial_injury_disablementBenefit) /=
          0.0)
      then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           industrial_injury_disablementBenefit));
         income_titles (1, 2) := income_titles (1, 2) & "Industrial Injury Disablement Benefit";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (incapacity_benefit) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           incapacity_benefit));
         income_titles (1, 2) := income_titles (1, 2) & "Incapacity Benefit";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (working_families_tax_credit) /=
          0.0)
      then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           working_families_tax_credit));
         income_titles (1, 2) := income_titles (1, 2) & "Working Families Tax Credit";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (new_deal) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (new_deal));
         income_titles (1, 2) := income_titles (1, 2) & "New Deal";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (working_tax_credit) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           working_tax_credit));
         income_titles (1, 2) := income_titles (1, 2) & "Working Tax Credit";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (child_tax_credit) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           child_tax_credit));
         income_titles (1, 2) := income_titles (1, 2) & "Child Tax Credit";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (any_other_benefit) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           any_other_benefit));
         income_titles (1, 2) := income_titles (1, 2) & "Any Other Benefit";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (widows_payment) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (widows_payment))
;
         income_titles (1, 2) := income_titles (1, 2) & "Widows Payment";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (unemployment_redundancy_insurance) /=
          0.0)
      then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           unemployment_redundancy_insurance));
         income_titles (1, 2) := income_titles (1, 2) & "Unemployment Redundancy Insurance";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (winter_fuel_payments) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           winter_fuel_payments));
         income_titles (1, 2) := income_titles (1, 2) & "Winter Fuel Payments";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (trade_union) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (trade_union));
         income_titles (1, 2) := income_titles (1, 2) & "Trade Union";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (friendly_society_benefits) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           friendly_society_benefits));
         income_titles (1, 2) := income_titles (1, 2) & "Friendly Society Benefits";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (private_sickness_scheme) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           private_sickness_scheme));
         income_titles (1, 2) := income_titles (1, 2) & "Private Sickness Scheme";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (accident_insurance_scheme) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           accident_insurance_scheme));
         income_titles (1, 2) := income_titles (1, 2) & "Accident Insurance Scheme";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (hospital_savings_scheme) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           hospital_savings_scheme));
         income_titles (1, 2) := income_titles (1, 2) & "Hospital Savings Scheme";
      end if;

      if (mhh.benefit_units (1).adults (spouse).incomes (health_insurance) /= 0.0) then
         income_values (1, 2) := income_values (1, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (1).adults (spouse).incomes (
           health_insurance));
         income_titles (1, 2) := income_titles (1, 2) & "Health Insurance";
      end if;

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-1-age",
            mhh.benefit_units (1).children (1).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-1-sex",
            mhh.benefit_units (1).children (1).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-1-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).children (1).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-1-relToHoH",
            FRS_Enums.pretty_print (mhh.benefit_units (1).children (1).relToHoH));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-2-age",
            mhh.benefit_units (1).children (2).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-2-sex",
            mhh.benefit_units (1).children (2).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-2-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).children (2).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-2-relToHoH",
            mhh.benefit_units (1).children (2).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-3-age",
            mhh.benefit_units (1).children (3).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-3-sex",
            mhh.benefit_units (1).children (3).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-3-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).children (3).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-3-relToHoH",
            mhh.benefit_units (1).children (3).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-4-age",
            mhh.benefit_units (1).children (4).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-4-sex",
            mhh.benefit_units (1).children (4).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-4-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).children (4).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-4-relToHoH",
            mhh.benefit_units (1).children (4).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-5-age",
            mhh.benefit_units (1).children (5).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-5-sex",
            mhh.benefit_units (1).children (5).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-5-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).children (5).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-5-relToHoH",
            mhh.benefit_units (1).children (5).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-6-age",
            mhh.benefit_units (1).children (6).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-6-sex",
            mhh.benefit_units (1).children (6).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-6-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).children (6).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-6-relToHoH",
            mhh.benefit_units (1).children (6).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-7-age",
            mhh.benefit_units (1).children (7).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-7-sex",
            mhh.benefit_units (1).children (7).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-7-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).children (7).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-7-relToHoH",
            mhh.benefit_units (1).children (7).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-8-age",
            mhh.benefit_units (1).children (8).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-8-sex",
            mhh.benefit_units (1).children (8).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-8-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).children (8).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-8-relToHoH",
            mhh.benefit_units (1).children (8).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-9-age",
            mhh.benefit_units (1).children (9).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-9-sex",
            mhh.benefit_units (1).children (9).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-9-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (1).children (9).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-1-children-9-relToHoH",
            mhh.benefit_units (1).children (9).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Capital-1-1",
            format_utils.format_with_commas (output (1) (1).assessable_Capital));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Capital-1-2",
            format_utils.format_with_commas (output (2) (1).assessable_Capital));
      diff             := output (2) (1).assessable_Capital - output (1) (1).assessable_Capital;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("assessable_Capital-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Capital-1-1",
            format_utils.format_with_commas (output (1) (1).excess_Capital));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Capital-1-2",
            format_utils.format_with_commas (output (2) (1).excess_Capital));
      diff             := output (2) (1).excess_Capital - output (1) (1).excess_Capital;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("excess_Capital-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Income-1-1",
            format_utils.format_with_commas (output (1) (1).excess_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Income-1-2",
            format_utils.format_with_commas (output (2) (1).excess_Income));
      diff             := output (2) (1).excess_Income - output (1) (1).excess_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("excess_Income-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("allowances-1-1",
            format_utils.format_with_commas (output (1) (1).allowances));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("allowances-1-2",
            format_utils.format_with_commas (output (2) (1).allowances));
      diff             := output (2) (1).allowances - output (1) (1).allowances;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("allowances-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Allowances-1-1",
            format_utils.format_with_commas (output (1) (1).capital_Allowances));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Allowances-1-2",
            format_utils.format_with_commas (output (2) (1).capital_Allowances));
      diff             := output (2) (1).capital_Allowances - output (1) (1).capital_Allowances;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("capital_Allowances-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Income-1-1",
            format_utils.format_with_commas (output (1) (1).assessable_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Income-1-2",
            format_utils.format_with_commas (output (2) (1).assessable_Income));
      diff             := output (2) (1).assessable_Income - output (1) (1).assessable_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("assessable_Income-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Capital-1-1",
            format_utils.format_with_commas (output (1) (1).disposable_Capital));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Capital-1-2",
            format_utils.format_with_commas (output (2) (1).disposable_Capital));
      diff             := output (2) (1).disposable_Capital - output (1) (1).disposable_Capital;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("disposable_Capital-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Income-1-1",
            format_utils.format_with_commas (output (1) (1).disposable_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Income-1-2",
            format_utils.format_with_commas (output (2) (1).disposable_Income));
      diff             := output (2) (1).disposable_Income - output (1) (1).disposable_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("disposable_Income-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("gross_Income-1-1",
            format_utils.format_with_commas (output (1) (1).gross_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("gross_Income-1-2",
            format_utils.format_with_commas (output (2) (1).gross_Income));
      diff             := output (2) (1).gross_Income - output (1) (1).gross_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("gross_Income-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("benefits_In_Kind-1-1",
            format_utils.format_with_commas (output (1) (1).benefits_In_Kind));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("benefits_In_Kind-1-2",
            format_utils.format_with_commas (output (2) (1).benefits_In_Kind));
      diff             := output (2) (1).benefits_In_Kind - output (1) (1).benefits_In_Kind;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("benefits_In_Kind-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("deductions_From_Income-1-1",
            format_utils.format_with_commas (output (1) (1).deductions_From_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("deductions_From_Income-1-2",
            format_utils.format_with_commas (output (2) (1).deductions_From_Income));
      diff             := output (2) (1).deductions_From_Income -
                          output (1) (1).deductions_From_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("deductions_From_Income-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("la_State-1-1", output (1) (1).la_State'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("la_State-1-2", output (2) (1).la_State'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("income_Contribution-1-1",
            format_utils.format_with_commas (output (1) (1).income_Contribution));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("income_Contribution-1-2",
            format_utils.format_with_commas (output (2) (1).income_Contribution));
      diff             := output (2) (1).income_Contribution -
                          output (1) (1).income_Contribution;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("income_Contribution-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Contribution-1-1",
            format_utils.format_with_commas (output (1) (1).capital_Contribution));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Contribution-1-2",
            format_utils.format_with_commas (output (2) (1).capital_Contribution));
      diff             := output (2) (1).capital_Contribution -
                          output (1) (1).capital_Contribution;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("capital_Contribution-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("housing_Costs-1-1",
            format_utils.format_with_commas (output (1) (1).housing_Costs));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("housing_Costs-1-2",
            format_utils.format_with_commas (output (2) (1).housing_Costs));
      diff             := output (2) (1).housing_Costs - output (1) (1).housing_Costs;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("housing_Costs-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("rent_Share_Deduction-1-1",
            format_utils.format_with_commas (output (1) (1).rent_Share_Deduction));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("rent_Share_Deduction-1-2",
            format_utils.format_with_commas (output (2) (1).rent_Share_Deduction));
      diff             := output (2) (1).rent_Share_Deduction -
                          output (1) (1).rent_Share_Deduction;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("rent_Share_Deduction-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("child_Allowances-1-1",
            format_utils.format_with_commas (output (1) (1).child_Allowances));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("child_Allowances-1-2",
            format_utils.format_with_commas (output (2) (1).child_Allowances));
      diff             := output (2) (1).child_Allowances - output (1) (1).child_Allowances;

      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("child_Allowances-1-diff", diff'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           (" partners_Allowances-1-1",
            format_utils.format_with_commas (output (1) (1).partners_Allowances));
      tablePos         := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           (" partners_Allowances-1-2",
            format_utils.format_with_commas (output (2) (1).partners_Allowances));
      diff             := output (2) (1).partners_Allowances -
                          output (1) (1).partners_Allowances;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc (" partners_Allowances-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("targetting_index-1-1",
            format_utils.format_with_commas (output (1) (1).targetting_index));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("targetting_index-1-2",
            format_utils.format_with_commas (output (2) (1).targetting_index));
      diff             := output (2) (1).targetting_index - output (1) (1).targetting_index;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("targetting_index-1-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc ("mhh-benefit_units-2-decile", mhh.benefit_units (2).decile'Img);

      tablePos := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-head-ilo-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (2).adults (head).ilo_employment));
      tablePos         := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-spouse-ilo-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (2).adults (spouse).ilo_employment));
      tablePos         := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-spouse-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (2).adults (spouse).employment));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-spouse-ethnic-group",
            FRS_Enums.pretty_print (mhh.benefit_units (2).adults (spouse).ethnic_group));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-economic_status",
            mhh.benefit_units (2).economic_status'Img);
      tablePos         := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-non_dependency_type",
            FRS_Enums.pretty_print(mhh.benefit_units(2).non_dependency_type ));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
        Templates_Parser.Assoc ("mhh-benefit_units-2-bu-type",
             FRS_Enums.pretty_print (mhh.benefit_units (2).bu_type));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-last-adult",
            mhh.benefit_units (2).last_adult'Img);

      tablePos := tablePos + 1;

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-economic-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).economic_status));

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-num-children",
            mhh.benefit_units (2).num_children'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-head-age",
            mhh.benefit_units (2).adults (head).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-head-sex",
            mhh.benefit_units (2).adults (head).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-head-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).adults (head).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-head-relToHoH",
            FRS_Enums.pretty_print (mhh.benefit_units (2).adults (head).relToHoH));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-head-is-lodger",
            mhh.benefit_units (2).adults (head).is_lodger'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-head-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (2).adults (head).employment));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-head-has-company-car",
            mhh.benefit_units (2).adults (head).has_company_car'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-head-capital-stock",
            mhh.benefit_units (2).adults (head).capital_stock'Img);

      tablePos := tablePos + 1;

      if (mhh.benefit_units (2).adults (head).finance (loan_repayments) /= 0.0) then
         finance_values (2, 1) := finance_values (2, 1) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (2).adults (head).finance (loan_repayments))
;
         finance_titles (2, 1) := finance_titles (2, 1) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (2).adults (head).finance (fines_and_transfers) /= 0.0) then
         finance_values (2, 1) := finance_values (2, 1) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (2).adults (head).finance (
           fines_and_transfers));
         finance_titles (2, 1) := finance_titles (2, 1) & "Fines And Transfers";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (travel_expenses) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (
           travel_expenses));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Travel Expenses";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (pension) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (pension));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Pension";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (avcs) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (avcs));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Avcs";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (union_fees) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (union_fees));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Union Fees";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (friendly_societies) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (
           friendly_societies));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Friendly Socs";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (sports) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (sports));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Sports";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (loan_repayments) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (
           loan_repayments));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (medical_insurance) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (
           medical_insurance));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Medical Insurance";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (charities) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (charities));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Charities";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (maintenance_payments) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (
           maintenance_payments));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Maintenance Payments";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (childminding) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (childminding));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Childminding";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (shared_rent) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (shared_rent));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Shared Rent";
      end if;

      if (mhh.benefit_units (2).adults (head).expenses (student_expenses) /= 0.0) then
         expenses_values (2, 1) := expenses_values (2, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (head).expenses (
           student_expenses));
         expenses_titles (2, 1) := expenses_titles (2, 1) & "Student Expenses";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (wages) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (wages));
         income_titles (2, 1) := income_titles (2, 1) & "Wages";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (luncheon_Vouchers) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (luncheon_Vouchers));
         income_titles (2, 1) := income_titles (2, 1) & "Luncheon Vouchers";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (self_Employment) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (self_Employment));
         income_titles (2, 1) := income_titles (2, 1) & "Self Employment";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (investment_Income) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (investment_Income));
         income_titles (2, 1) := income_titles (2, 1) & "Investment Income";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (pensions) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (pensions));
         income_titles (2, 1) := income_titles (2, 1) & "pensions";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (other_Income) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (other_Income));
         income_titles (2, 1) := income_titles (2, 1) & "Other Income";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (income_Tax) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (income_Tax));
         income_titles (2, 1) := income_titles (2, 1) & "Income Tax";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (national_insurance) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           national_insurance));
         income_titles (2, 1) := income_titles (2, 1) & "National Insurance";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (disability_living_allowance) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           disability_living_allowance));
         income_titles (2, 1) := income_titles (2, 1) & "Disability Living Allowance";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (attendance_allowance) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           attendance_allowance));
         income_titles (2, 1) := income_titles (2, 1) & "Attendance Allowance";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (constantattendance_allowance) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           constantattendance_allowance));
         income_titles (2, 1) := income_titles (2, 1) & "Constant Attendance Allowance";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (social_fund) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (social_fund));
         income_titles (2, 1) := income_titles (2, 1) & "Social Fund";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (child_benefit) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (child_benefit));
         income_titles (2, 1) := income_titles (2, 1) & "Child Benefit";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (guaranteed_pension_credit) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           guaranteed_pension_credit));
         income_titles (2, 1) := income_titles (2, 1) & "Guaranteed Pension Credit";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (savings_pension_credit) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           savings_pension_credit));
         income_titles (2, 1) := income_titles (2, 1) & "Savings Pension Credit";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (retirement_pension) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           retirement_pension));
         income_titles (2, 1) := income_titles (2, 1) & "Retirement Pension";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (widows_pensions) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (widows_pensions));
         income_titles (2, 1) := income_titles (2, 1) & "Widows pensions";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (income_support) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (income_support));
         income_titles (2, 1) := income_titles (2, 1) & "Income Support";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (maternity_allowance) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           maternity_allowance));
         income_titles (2, 1) := income_titles (2, 1) & "Maternity Allowance";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (widowed_mothers_allowance) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           widowed_mothers_allowance));
         income_titles (2, 1) := income_titles (2, 1) & "Widowed Mothers Allowance";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (war_disablement_pension) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           war_disablement_pension));
         income_titles (2, 1) := income_titles (2, 1) & "War Disablement Pension";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (war_widow_pension) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (war_widow_pension)
);
         income_titles (2, 1) := income_titles (2, 1) & "War Widow Pension";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (severe_disability_allowance) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           severe_disability_allowance));
         income_titles (2, 1) := income_titles (2, 1) & "Severe Disability Allowance";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (disabled_persons_tax_credit) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           disabled_persons_tax_credit));
         income_titles (2, 1) := income_titles (2, 1) & "Disabled Persons Tax Credit";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (invalid_care_allowance) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           invalid_care_allowance));
         income_titles (2, 1) := income_titles (2, 1) & "Invalid Care Allowance";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (income_related_jobseekers_allowance) /=
          0.0)
      then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           income_related_jobseekers_allowance));
         income_titles (2, 1) := income_titles (2, 1) & "Income Related Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (contributory_jobseekers_allowance) /=
          0.0)
      then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           contributory_jobseekers_allowance));
         income_titles (2, 1) := income_titles (2, 1) & "Contributory Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (industrial_injury_disablementBenefit) /=
          0.0)
      then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           industrial_injury_disablementBenefit));
         income_titles (2, 1) := income_titles (2, 1) & "Industrial Injury Disablement Benefit";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (incapacity_benefit) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           incapacity_benefit));
         income_titles (2, 1) := income_titles (2, 1) & "Incapacity Benefit";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (working_families_tax_credit) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           working_families_tax_credit));
         income_titles (2, 1) := income_titles (2, 1) & "Working Families Tax Credit";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (new_deal) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (new_deal));
         income_titles (2, 1) := income_titles (2, 1) & "New Deal";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (working_tax_credit) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           working_tax_credit));
         income_titles (2, 1) := income_titles (2, 1) & "Working Tax Credit";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (child_tax_credit) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (child_tax_credit));
         income_titles (2, 1) := income_titles (2, 1) & "Child Tax Credit";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (any_other_benefit) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (any_other_benefit)
);
         income_titles (2, 1) := income_titles (2, 1) & "Any Other Benefit";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (widows_payment) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (widows_payment));
         income_titles (2, 1) := income_titles (2, 1) & "Widows Payment";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (unemployment_redundancy_insurance) /=
          0.0)
      then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           unemployment_redundancy_insurance));
         income_titles (2, 1) := income_titles (2, 1) & "Unemployment Redundancy Insurance";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (winter_fuel_payments) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           winter_fuel_payments));
         income_titles (2, 1) := income_titles (2, 1) & "Winter Fuel Payments";
      end if;


      if (mhh.benefit_units (2).adults (head).incomes (trade_union) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (trade_union));
         income_titles (2, 1) := income_titles (2, 1) & "Trade Union";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (friendly_society_benefits) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           friendly_society_benefits));
         income_titles (2, 1) := income_titles (2, 1) & "Friendly Society Benefits";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (private_sickness_scheme) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           private_sickness_scheme));
         income_titles (2, 1) := income_titles (2, 1) & "Private Sickness Scheme";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (accident_insurance_scheme) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           accident_insurance_scheme));
         income_titles (2, 1) := income_titles (2, 1) & "Accident Insurance Scheme";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (hospital_savings_scheme) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (
           hospital_savings_scheme));
         income_titles (2, 1) := income_titles (2, 1) & "Hospital Savings Scheme";
      end if;

      if (mhh.benefit_units (2).adults (head).incomes (health_insurance) /= 0.0) then
         income_values (2, 1) := income_values (2, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (head).incomes (health_insurance))
;
         income_titles (2, 1) := income_titles (2, 1) & "Health Insurance";
      end if;

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-spouse-age",
            mhh.benefit_units (2).adults (spouse).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-spouse-sex",
            mhh.benefit_units (2).adults (spouse).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-spouse-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).adults (spouse).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-spouse-relToHoH",
            FRS_Enums.pretty_print (mhh.benefit_units (2).adults (spouse).relToHoH));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-spouse-is-lodger",
            mhh.benefit_units (2).adults (spouse).is_lodger'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-spouse-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (2).adults (spouse).employment));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-spouse-has-company-car",
            mhh.benefit_units (2).adults (spouse).has_company_car'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-adults-spouse-capital-stock",
            mhh.benefit_units (2).adults (spouse).capital_stock'Img);

      tablePos := tablePos + 1;

      if (mhh.benefit_units (2).adults (spouse).finance (loan_repayments) /= 0.0) then
         finance_values (2, 2) := finance_values (2, 2) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (2).adults (spouse).finance (
           loan_repayments));
         finance_titles (2, 2) := finance_titles (2, 2) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (2).adults (spouse).finance (fines_and_transfers) /= 0.0) then
         finance_values (2, 2) := finance_values (2, 2) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (2).adults (spouse).finance (
           fines_and_transfers));
         finance_titles (2, 2) := finance_titles (2, 2) & "Fines And Transfers";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (travel_expenses) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (
           travel_expenses));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Travel Expenses";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (pension) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (pension));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Pension";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (avcs) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (avcs));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Avcs";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (union_fees) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (union_fees));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Union Fees";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (friendly_societies) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (
           friendly_societies));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Friendly Socs";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (sports) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (sports));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Sports";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (loan_repayments) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (
           loan_repayments));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (medical_insurance) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (
           medical_insurance));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Medical Insurance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (charities) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (charities));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Charities";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (maintenance_payments) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (
           maintenance_payments));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Maintenance Payments";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (childminding) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (childminding));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Childminding";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (shared_rent) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (shared_rent))
;
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Shared Rent";
      end if;

      if (mhh.benefit_units (2).adults (spouse).expenses (student_expenses) /= 0.0) then
         expenses_values (2, 2) := expenses_values (2, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (2).adults (spouse).expenses (
           student_expenses));
         expenses_titles (2, 2) := expenses_titles (2, 2) & "Student Expenses";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (wages) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (wages));
         income_titles (2, 2) := income_titles (2, 2) & "Wages";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (luncheon_Vouchers) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           luncheon_Vouchers));
         income_titles (2, 2) := income_titles (2, 2) & "Luncheon Vouchers";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (self_Employment) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (self_Employment));
         income_titles (2, 2) := income_titles (2, 2) & "Self Employment";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (investment_Income) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           investment_Income));
         income_titles (2, 2) := income_titles (2, 2) & "Investment Income";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (pensions) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (pensions));
         income_titles (2, 2) := income_titles (2, 2) & "pensions";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (other_Income) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (other_Income));
         income_titles (2, 2) := income_titles (2, 2) & "Other Income";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (income_Tax) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (income_Tax));
         income_titles (2, 2) := income_titles (2, 2) & "Income Tax";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (national_insurance) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           national_insurance));
         income_titles (2, 2) := income_titles (2, 2) & "National Insurance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (disability_living_allowance) /=
          0.0)
      then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           disability_living_allowance));
         income_titles (2, 2) := income_titles (2, 2) & "Disability Living Allowance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (attendance_allowance) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           attendance_allowance));
         income_titles (2, 2) := income_titles (2, 2) & "Attendance Allowance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (constantattendance_allowance) /=
          0.0)
      then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           constantattendance_allowance));
         income_titles (2, 2) := income_titles (2, 2) & "Constant Attendance Allowance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (social_fund) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (social_fund));
         income_titles (2, 2) := income_titles (2, 2) & "Social Fund";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (child_benefit) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (child_benefit));
         income_titles (2, 2) := income_titles (2, 2) & "Child Benefit";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (guaranteed_pension_credit) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           guaranteed_pension_credit));
         income_titles (2, 2) := income_titles (2, 2) & "Guaranteed Pension Credit";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (savings_pension_credit) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           savings_pension_credit));
         income_titles (2, 2) := income_titles (2, 2) & "Savings Pension Credit";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (retirement_pension) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           retirement_pension));
         income_titles (2, 2) := income_titles (2, 2) & "Retirement Pension";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (widows_pensions) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (widows_pensions));
         income_titles (2, 2) := income_titles (2, 2) & "Widows pensions";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (income_support) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (income_support));
         income_titles (2, 2) := income_titles (2, 2) & "Income Support";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (maternity_allowance) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           maternity_allowance));
         income_titles (2, 2) := income_titles (2, 2) & "Maternity Allowance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (widowed_mothers_allowance) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           widowed_mothers_allowance));
         income_titles (2, 2) := income_titles (2, 2) & "Widowed Mothers Allowance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (war_disablement_pension) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           war_disablement_pension));
         income_titles (2, 2) := income_titles (2, 2) & "War Disablement Pension";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (war_widow_pension) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           war_widow_pension));
         income_titles (2, 2) := income_titles (2, 2) & "War Widow Pension";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (severe_disability_allowance) /=
          0.0)
      then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           severe_disability_allowance));
         income_titles (2, 2) := income_titles (2, 2) & "Severe Disability Allowance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (disabled_persons_tax_credit) /=
          0.0)
      then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           disabled_persons_tax_credit));
         income_titles (2, 2) := income_titles (2, 2) & "Disabled Persons Tax Credit";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (invalid_care_allowance) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           invalid_care_allowance));
         income_titles (2, 2) := income_titles (2, 2) & "Invalid Care Allowance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (income_related_jobseekers_allowance) /=
          0.0)
      then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           income_related_jobseekers_allowance));
         income_titles (2, 2) := income_titles (2, 2) & "Income Related Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (contributory_jobseekers_allowance) /=
          0.0)
      then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           contributory_jobseekers_allowance));
         income_titles (2, 2) := income_titles (2, 2) & "Contributory Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (industrial_injury_disablementBenefit) /=
          0.0)
      then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           industrial_injury_disablementBenefit));
         income_titles (2, 2) := income_titles (2, 2) & "Industrial Injury Disablement Benefit";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (incapacity_benefit) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           incapacity_benefit));
         income_titles (2, 2) := income_titles (2, 2) & "Incapacity Benefit";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (working_families_tax_credit) /=
          0.0)
      then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           working_families_tax_credit));
         income_titles (2, 2) := income_titles (2, 2) & "Working Families Tax Credit";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (new_deal) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (new_deal));
         income_titles (2, 2) := income_titles (2, 2) & "New Deal";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (working_tax_credit) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           working_tax_credit));
         income_titles (2, 2) := income_titles (2, 2) & "Working Tax Credit";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (child_tax_credit) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           child_tax_credit));
         income_titles (2, 2) := income_titles (2, 2) & "Child Tax Credit";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (any_other_benefit) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           any_other_benefit));
         income_titles (2, 2) := income_titles (2, 2) & "Any Other Benefit";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (widows_payment) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (widows_payment));
         income_titles (2, 2) := income_titles (2, 2) & "Widows Payment";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (unemployment_redundancy_insurance) /=
          0.0)
      then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           unemployment_redundancy_insurance));
         income_titles (2, 2) := income_titles (2, 2) & "Unemployment Redundancy Insurance";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (winter_fuel_payments) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           winter_fuel_payments));
         income_titles (2, 2) := income_titles (2, 2) & "Winter Fuel Payments";
      end if;


      if (mhh.benefit_units (2).adults (spouse).incomes (trade_union) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (trade_union));
         income_titles (2, 2) := income_titles (2, 2) & "Trade Union";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (friendly_society_benefits) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           friendly_society_benefits));
         income_titles (2, 2) := income_titles (2, 2) & "Friendly Society Benefits";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (private_sickness_scheme) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           private_sickness_scheme));
         income_titles (2, 2) := income_titles (2, 2) & "Private Sickness Scheme";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (accident_insurance_scheme) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           accident_insurance_scheme));
         income_titles (2, 2) := income_titles (2, 2) & "Accident Insurance Scheme";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (hospital_savings_scheme) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           hospital_savings_scheme));
         income_titles (2, 2) := income_titles (2, 2) & "Hospital Savings Scheme";
      end if;

      if (mhh.benefit_units (2).adults (spouse).incomes (health_insurance) /= 0.0) then
         income_values (2, 2) := income_values (2, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (2).adults (spouse).incomes (
           health_insurance));
         income_titles (2, 2) := income_titles (2, 2) & "Health Insurance";
      end if;

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-1-age",
            mhh.benefit_units (2).children (1).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-1-sex",
            mhh.benefit_units (2).children (1).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-1-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).children (1).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-1-relToHoH",
            mhh.benefit_units (2).children (1).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-2-age",
            mhh.benefit_units (2).children (2).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-2-sex",
            mhh.benefit_units (2).children (2).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-2-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).children (2).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-2-relToHoH",
            mhh.benefit_units (2).children (2).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-3-age",
            mhh.benefit_units (2).children (3).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-3-sex",
            mhh.benefit_units (2).children (3).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-3-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).children (3).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-3-relToHoH",
            mhh.benefit_units (2).children (3).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-4-age",
            mhh.benefit_units (2).children (4).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-4-sex",
            mhh.benefit_units (2).children (4).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-4-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).children (4).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-4-relToHoH",
            mhh.benefit_units (2).children (4).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-5-age",
            mhh.benefit_units (2).children (5).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-5-sex",
            mhh.benefit_units (2).children (5).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-5-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).children (5).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-5-relToHoH",
            mhh.benefit_units (2).children (5).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-6-age",
            mhh.benefit_units (2).children (6).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-6-sex",
            mhh.benefit_units (2).children (6).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-6-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).children (6).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-6-relToHoH",
            mhh.benefit_units (2).children (6).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-7-age",
            mhh.benefit_units (2).children (7).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-7-sex",
            mhh.benefit_units (2).children (7).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-7-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).children (7).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-7-relToHoH",
            mhh.benefit_units (2).children (7).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-8-age",
            mhh.benefit_units (2).children (8).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-8-sex",
            mhh.benefit_units (2).children (8).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-8-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).children (8).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-8-relToHoH",
            mhh.benefit_units (2).children (8).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-9-age",
            mhh.benefit_units (2).children (9).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-9-sex",
            mhh.benefit_units (2).children (9).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-9-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (2).children (9).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-2-children-9-relToHoH",
            mhh.benefit_units (2).children (9).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Capital-2-1",
            format_utils.format_with_commas (output (1) (2).assessable_Capital));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Capital-2-2",
            format_utils.format_with_commas (output (2) (2).assessable_Capital));
      diff             := output (2) (2).assessable_Capital - output (1) (2).assessable_Capital;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("assessable_Capital-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Capital-2-1",
            format_utils.format_with_commas (output (1) (2).excess_Capital));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Capital-2-2",
            format_utils.format_with_commas (output (2) (2).excess_Capital));
      diff             := output (2) (2).excess_Capital - output (1) (2).excess_Capital;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("excess_Capital-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Income-2-1",
            format_utils.format_with_commas (output (1) (2).excess_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Income-2-2",
            format_utils.format_with_commas (output (2) (2).excess_Income));
      diff             := output (2) (2).excess_Income - output (1) (2).excess_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("excess_Income-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("allowances-2-1",
            format_utils.format_with_commas (output (1) (2).allowances));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("allowances-2-2",
            format_utils.format_with_commas (output (2) (2).allowances));
      diff             := output (2) (2).allowances - output (1) (2).allowances;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("allowances-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Allowances-2-1",
            format_utils.format_with_commas (output (1) (2).capital_Allowances));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Allowances-2-2",
            format_utils.format_with_commas (output (2) (2).capital_Allowances));
      diff             := output (2) (2).capital_Allowances - output (1) (2).capital_Allowances;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("capital_Allowances-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Income-2-1",
            format_utils.format_with_commas (output (1) (2).assessable_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Income-2-2",
            format_utils.format_with_commas (output (2) (2).assessable_Income));
      diff             := output (2) (2).assessable_Income - output (1) (2).assessable_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("assessable_Income-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Capital-2-1",
            format_utils.format_with_commas (output (1) (2).disposable_Capital));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Capital-2-2",
            format_utils.format_with_commas (output (2) (2).disposable_Capital));
      diff             := output (2) (2).disposable_Capital - output (1) (2).disposable_Capital;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("disposable_Capital-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Income-2-1",
            format_utils.format_with_commas (output (1) (2).disposable_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Income-2-2",
            format_utils.format_with_commas (output (2) (2).disposable_Income));
      diff             := output (2) (2).disposable_Income - output (1) (2).disposable_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("disposable_Income-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("gross_Income-2-1",
            format_utils.format_with_commas (output (1) (2).gross_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("gross_Income-2-2",
            format_utils.format_with_commas (output (2) (2).gross_Income));
      diff             := output (2) (2).gross_Income - output (1) (2).gross_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("gross_Income-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("benefits_In_Kind-2-1",
            format_utils.format_with_commas (output (1) (2).benefits_In_Kind));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("benefits_In_Kind-2-2",
            format_utils.format_with_commas (output (2) (2).benefits_In_Kind));
      diff             := output (2) (2).benefits_In_Kind - output (1) (2).benefits_In_Kind;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("benefits_In_Kind-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("deductions_From_Income-2-1",
            format_utils.format_with_commas (output (1) (2).deductions_From_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("deductions_From_Income-2-2",
            format_utils.format_with_commas (output (2) (2).deductions_From_Income));
      diff             := output (2) (2).deductions_From_Income -
                          output (1) (2).deductions_From_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("deductions_From_Income-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("la_State-2-1", output (1) (2).la_State'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("la_State-2-2", output (2) (2).la_State'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("income_Contribution-2-1",
            format_utils.format_with_commas (output (1) (2).income_Contribution));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("income_Contribution-2-2",
            format_utils.format_with_commas (output (2) (2).income_Contribution));
      diff             := output (2) (2).income_Contribution -
                          output (1) (2).income_Contribution;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("income_Contribution-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Contribution-2-1",
            format_utils.format_with_commas (output (1) (2).capital_Contribution));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Contribution-2-2",
            format_utils.format_with_commas (output (2) (2).capital_Contribution));
      diff             := output (2) (2).capital_Contribution -
                          output (1) (2).capital_Contribution;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("capital_Contribution-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("housing_Costs-2-1",
            format_utils.format_with_commas (output (1) (2).housing_Costs));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("housing_Costs-2-2",
            format_utils.format_with_commas (output (2) (2).housing_Costs));
      diff             := output (2) (2).housing_Costs - output (1) (2).housing_Costs;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("housing_Costs-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("rent_Share_Deduction-2-1",
            format_utils.format_with_commas (output (1) (2).rent_Share_Deduction));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("rent_Share_Deduction-2-2",
            format_utils.format_with_commas (output (2) (2).rent_Share_Deduction));
      diff             := output (2) (2).rent_Share_Deduction -
                          output (1) (2).rent_Share_Deduction;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("rent_Share_Deduction-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("child_Allowances-2-1",
            format_utils.format_with_commas (output (1) (2).child_Allowances));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("child_Allowances-2-2",
            format_utils.format_with_commas (output (2) (2).child_Allowances));
      diff             := output (2) (2).child_Allowances - output (1) (2).child_Allowances;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("child_Allowances-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           (" partners_Allowances-2-1",
            format_utils.format_with_commas (output (1) (2).partners_Allowances));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           (" partners_Allowances-2-2",
            format_utils.format_with_commas (output (2) (2).partners_Allowances));
      diff             := output (2) (2).partners_Allowances -
                          output (1) (2).partners_Allowances;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc (" partners_Allowances-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("targetting_index-2-1",
            format_utils.format_with_commas (output (1) (2).targetting_index));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("targetting_index-2-2",
            format_utils.format_with_commas (output (2) (2).targetting_index));
      diff             := output (2) (2).targetting_index - output (1) (2).targetting_index;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("targetting_index-2-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc ("mhh-benefit_units-3-decile", mhh.benefit_units (3).decile'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-economic_status",
            mhh.benefit_units (3).economic_status'Img);

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-spouse-ilo-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (3).adults (spouse).ilo_employment));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-spouse-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (3).adults (spouse).employment));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-spouse-ethnic-group",
            FRS_Enums.pretty_print (mhh.benefit_units (3).adults (spouse).ethnic_group));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
        Templates_Parser.Assoc ("mhh-benefit_units-3-bu-type",
                                FRS_Enums.pretty_print (mhh.benefit_units (3).bu_type));

      tablePos := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-last-adult",
            mhh.benefit_units (3).last_adult'Img);
      tablePos         := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-economic-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).economic_status));
      tablePos         := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-num-children",
            mhh.benefit_units (3).num_children'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-head-age",
            mhh.benefit_units (3).adults (head).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-head-sex",
            mhh.benefit_units (3).adults (head).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-head-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).adults (head).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-head-relToHoH",
            FRS_Enums.pretty_print (mhh.benefit_units (3).adults (head).relToHoH));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-head-is-lodger",
            mhh.benefit_units (3).adults (head).is_lodger'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-head-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (3).adults (head).employment));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-head-has-company-car",
            mhh.benefit_units (3).adults (head).has_company_car'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-head-capital-stock",
            mhh.benefit_units (3).adults (head).capital_stock'Img);

      tablePos := tablePos + 1;

      if (mhh.benefit_units (3).adults (head).finance (loan_repayments) /= 0.0) then
         finance_values (3, 1) := finance_values (3, 1) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (3).adults (head).finance (loan_repayments))
;
         finance_titles (3, 1) := finance_titles (3, 1) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (3).adults (head).finance (fines_and_transfers) /= 0.0) then
         finance_values (3, 1) := finance_values (3, 1) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (3).adults (head).finance (
           fines_and_transfers));
         finance_titles (3, 1) := finance_titles (3, 1) & "Fines And Transfers";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (travel_expenses) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (
           travel_expenses));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Travel Expenses";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (pension) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (pension));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Pension";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (avcs) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (avcs));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Avcs";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (union_fees) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (union_fees));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Union Fees";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (friendly_societies) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (
           friendly_societies));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Friendly Socs";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (sports) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (sports));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Sports";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (loan_repayments) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (
           loan_repayments));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (medical_insurance) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (
           medical_insurance));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Medical Insurance";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (charities) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (charities));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Charities";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (maintenance_payments) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (
           maintenance_payments));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Maintenance Payments";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (childminding) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (childminding));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Childminding";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (shared_rent) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (shared_rent));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Shared Rent";
      end if;

      if (mhh.benefit_units (3).adults (head).expenses (student_expenses) /= 0.0) then
         expenses_values (3, 1) := expenses_values (3, 1) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (head).expenses (
           student_expenses));
         expenses_titles (3, 1) := expenses_titles (3, 1) & "Student Expenses";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (wages) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (wages));
         income_titles (3, 1) := income_titles (3, 1) & "Wages";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (luncheon_Vouchers) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (luncheon_Vouchers)
);
         income_titles (3, 1) := income_titles (3, 1) & "Luncheon Vouchers";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (self_Employment) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (self_Employment));
         income_titles (3, 1) := income_titles (3, 1) & "Self Employment";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (investment_Income) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (investment_Income)
);
         income_titles (3, 1) := income_titles (3, 1) & "Investment Income";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (pensions) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (pensions));
         income_titles (3, 1) := income_titles (3, 1) & "pensions";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (other_Income) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (other_Income));
         income_titles (3, 1) := income_titles (3, 1) & "Other Income";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (income_Tax) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (income_Tax));
         income_titles (3, 1) := income_titles (3, 1) & "Income Tax";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (national_insurance) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           national_insurance));
         income_titles (3, 1) := income_titles (3, 1) & "National Insurance";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (disability_living_allowance) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           disability_living_allowance));
         income_titles (3, 1) := income_titles (3, 1) & "Disability Living Allowance";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (attendance_allowance) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           attendance_allowance));
         income_titles (3, 1) := income_titles (3, 1) & "Attendance Allowance";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (constantattendance_allowance) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           constantattendance_allowance));
         income_titles (3, 1) := income_titles (3, 1) & "Constant Attendance Allowance";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (social_fund) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (social_fund));
         income_titles (3, 1) := income_titles (3, 1) & "Social Fund";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (child_benefit) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (child_benefit));
         income_titles (3, 1) := income_titles (3, 1) & "Child Benefit";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (guaranteed_pension_credit) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           guaranteed_pension_credit));
         income_titles (3, 1) := income_titles (3, 1) & "Guaranteed Pension Credit";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (savings_pension_credit) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           savings_pension_credit));
         income_titles (3, 1) := income_titles (3, 1) & "Savings Pension Credit";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (retirement_pension) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           retirement_pension));
         income_titles (3, 1) := income_titles (3, 1) & "Retirement Pension";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (widows_pensions) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (widows_pensions));
         income_titles (3, 1) := income_titles (3, 1) & "Widows pensions";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (income_support) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (income_support));
         income_titles (3, 1) := income_titles (3, 1) & "Income Support";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (maternity_allowance) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           maternity_allowance));
         income_titles (3, 1) := income_titles (3, 1) & "Maternity Allowance";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (widowed_mothers_allowance) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           widowed_mothers_allowance));
         income_titles (3, 1) := income_titles (3, 1) & "Widowed Mothers Allowance";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (war_disablement_pension) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           war_disablement_pension));
         income_titles (3, 1) := income_titles (3, 1) & "War Disablement Pension";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (war_widow_pension) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (war_widow_pension));
         income_titles (3, 1) := income_titles (3, 1) & "War Widow Pension";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (severe_disability_allowance) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           severe_disability_allowance));
         income_titles (3, 1) := income_titles (3, 1) & "Severe Disability Allowance";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (disabled_persons_tax_credit) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           disabled_persons_tax_credit));
         income_titles (3, 1) := income_titles (3, 1) & "Disabled Persons Tax Credit";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (invalid_care_allowance) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           invalid_care_allowance));
         income_titles (3, 1) := income_titles (3, 1) & "Invalid Care Allowance";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (income_related_jobseekers_allowance) /=
          0.0)
      then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           income_related_jobseekers_allowance));
         income_titles (3, 1) := income_titles (3, 1) & "Income Related Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (contributory_jobseekers_allowance) /=
          0.0)
      then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           contributory_jobseekers_allowance));
         income_titles (3, 1) := income_titles (3, 1) & "Contributory Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (industrial_injury_disablementBenefit) /=
          0.0)
      then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           industrial_injury_disablementBenefit));
         income_titles (3, 1) := income_titles (3, 1) & "Industrial Injury Disablement Benefit";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (incapacity_benefit) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           incapacity_benefit));
         income_titles (3, 1) := income_titles (3, 1) & "Incapacity Benefit";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (working_families_tax_credit) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           working_families_tax_credit));
         income_titles (3, 1) := income_titles (3, 1) & "Working Families Tax Credit";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (new_deal) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (new_deal));
         income_titles (3, 1) := income_titles (3, 1) & "New Deal";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (working_tax_credit) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           working_tax_credit));
         income_titles (3, 1) := income_titles (3, 1) & "Working Tax Credit";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (child_tax_credit) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (child_tax_credit));
         income_titles (3, 1) := income_titles (3, 1) & "Child Tax Credit";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (any_other_benefit) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (any_other_benefit));
         income_titles (3, 1) := income_titles (3, 1) & "Any Other Benefit";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (widows_payment) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (widows_payment));
         income_titles (3, 1) := income_titles (3, 1) & "Widows Payment";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (unemployment_redundancy_insurance) /=
          0.0)
      then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           unemployment_redundancy_insurance));
         income_titles (3, 1) := income_titles (3, 1) & "Unemployment Redundancy Insurance";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (winter_fuel_payments) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           winter_fuel_payments));
         income_titles (3, 1) := income_titles (3, 1) & "Winter Fuel Payments";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (trade_union) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (trade_union));
         income_titles (3, 1) := income_titles (3, 1) & "Trade Union";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (friendly_society_benefits) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           friendly_society_benefits));
         income_titles (3, 1) := income_titles (3, 1) & "Friendly Society Benefits";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (private_sickness_scheme) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           private_sickness_scheme));
         income_titles (3, 1) := income_titles (3, 1) & "Private Sickness Scheme";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (accident_insurance_scheme) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           accident_insurance_scheme));
         income_titles (3, 1) := income_titles (3, 1) & "Accident Insurance Scheme";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (hospital_savings_scheme) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (
           hospital_savings_scheme));
         income_titles (3, 1) := income_titles (3, 1) & "Hospital Savings Scheme";
      end if;

      if (mhh.benefit_units (3).adults (head).incomes (health_insurance) /= 0.0) then
         income_values (3, 1) := income_values (3, 1) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (head).incomes (health_insurance));
         income_titles (3, 1) := income_titles (3, 1) & "Health Insurance";
      end if;

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-spouse-age",
            mhh.benefit_units (3).adults (spouse).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-spouse-sex",
            mhh.benefit_units (3).adults (spouse).sex'Img);

      tablePos         := tablePos + 1;

      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-non_dependency_type",
            FRS_Enums.pretty_print(mhh.benefit_units(3).non_dependency_type ));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-spouse-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).adults (spouse).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-spouse-relToHoH",
            FRS_Enums.pretty_print (mhh.benefit_units (3).adults (spouse).relToHoH));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-spouse-is-lodger",
            mhh.benefit_units (3).adults (spouse).is_lodger'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-spouse-employment",
            FRS_Enums.pretty_print (mhh.benefit_units (3).adults (spouse).employment));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-spouse-has-company-car",
            mhh.benefit_units (3).adults (spouse).has_company_car'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-adults-spouse-capital-stock",
            mhh.benefit_units (3).adults (spouse).capital_stock'Img);

      tablePos := tablePos + 1;

      if (mhh.benefit_units (3).adults (spouse).finance (loan_repayments) /= 0.0) then
         finance_values (3, 2) := finance_values (3, 2) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (3).adults (spouse).finance (
           loan_repayments));
         finance_titles (3, 2) := finance_titles (3, 2) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (3).adults (spouse).finance (fines_and_transfers) /= 0.0) then
         finance_values (3, 2) := finance_values (3, 2) &
                                  format_utils.format_with_commas
                                     (mhh.benefit_units (3).adults (spouse).finance (
           fines_and_transfers));
         finance_titles (3, 2) := finance_titles (3, 2) & "Fines And Transfers";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (travel_expenses) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (
           travel_expenses));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Travel Expenses";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (pension) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (pension));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Pension";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (avcs) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (avcs));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Avcs";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (union_fees) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (union_fees));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Union Fees";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (friendly_societies) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (
           friendly_societies));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Friendly Socs";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (sports) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (sports));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Sports";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (loan_repayments) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (
           loan_repayments));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Loan Repayments";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (medical_insurance) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (
           medical_insurance));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Medical Insurance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (charities) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (charities));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Charities";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (maintenance_payments) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (
           maintenance_payments));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Maintenance Payments";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (childminding) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (childminding));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Childminding";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (shared_rent) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (shared_rent));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Shared Rent";
      end if;

      if (mhh.benefit_units (3).adults (spouse).expenses (student_expenses) /= 0.0) then
         expenses_values (3, 2) := expenses_values (3, 2) &
                                   format_utils.format_with_commas
                                      (mhh.benefit_units (3).adults (spouse).expenses (
           student_expenses));
         expenses_titles (3, 2) := expenses_titles (3, 2) & "Student Expenses";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (wages) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (wages));
         income_titles (3, 2) := income_titles (3, 2) & "Wages";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (luncheon_Vouchers) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           luncheon_Vouchers));
         income_titles (3, 2) := income_titles (3, 2) & "Luncheon Vouchers";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (self_Employment) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (self_Employment)
);
         income_titles (3, 2) := income_titles (3, 2) & "Self Employment";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (investment_Income) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           investment_Income));
         income_titles (3, 2) := income_titles (3, 2) & "Investment Income";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (pensions) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (pensions));
         income_titles (3, 2) := income_titles (3, 2) & "pensions";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (other_Income) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (other_Income));
         income_titles (3, 2) := income_titles (3, 2) & "Other Income";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (income_Tax) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (income_Tax));
         income_titles (3, 2) := income_titles (3, 2) & "Income Tax";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (national_insurance) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           national_insurance));
         income_titles (3, 2) := income_titles (3, 2) & "National Insurance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (disability_living_allowance) /=
          0.0)
      then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           disability_living_allowance));
         income_titles (3, 2) := income_titles (3, 2) & "Disability Living Allowance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (attendance_allowance) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           attendance_allowance));
         income_titles (3, 2) := income_titles (3, 2) & "Attendance Allowance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (constantattendance_allowance) /=
          0.0)
      then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           constantattendance_allowance));
         income_titles (3, 2) := income_titles (3, 2) & "Constant Attendance Allowance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (social_fund) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (social_fund));
         income_titles (3, 2) := income_titles (3, 2) & "Social Fund";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (child_benefit) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (child_benefit));
         income_titles (3, 2) := income_titles (3, 2) & "Child Benefit";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (guaranteed_pension_credit) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           guaranteed_pension_credit));
         income_titles (3, 2) := income_titles (3, 2) & "Guaranteed Pension Credit";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (savings_pension_credit) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           savings_pension_credit));
         income_titles (3, 2) := income_titles (3, 2) & "Savings Pension Credit";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (retirement_pension) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           retirement_pension));
         income_titles (3, 2) := income_titles (3, 2) & "Retirement Pension";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (widows_pensions) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (widows_pensions));
         income_titles (3, 2) := income_titles (3, 2) & "Widows pensions";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (income_support) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (income_support));
         income_titles (3, 2) := income_titles (3, 2) & "Income Support";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (maternity_allowance) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           maternity_allowance));
         income_titles (3, 2) := income_titles (3, 2) & "Maternity Allowance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (widowed_mothers_allowance) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           widowed_mothers_allowance));
         income_titles (3, 2) := income_titles (3, 2) & "Widowed Mothers Allowance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (war_disablement_pension) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           war_disablement_pension));
         income_titles (3, 2) := income_titles (3, 2) & "War Disablement Pension";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (war_widow_pension) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           war_widow_pension));
         income_titles (3, 2) := income_titles (3, 2) & "War Widow Pension";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (severe_disability_allowance) /=
          0.0)
      then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           severe_disability_allowance));
         income_titles (3, 2) := income_titles (3, 2) & "Severe Disability Allowance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (disabled_persons_tax_credit) /=
          0.0)
      then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           disabled_persons_tax_credit));
         income_titles (3, 2) := income_titles (3, 2) & "Disabled Persons Tax Credit";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (invalid_care_allowance) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           invalid_care_allowance));
         income_titles (3, 2) := income_titles (3, 2) & "Invalid Care Allowance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (income_related_jobseekers_allowance) /=
          0.0)
      then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           income_related_jobseekers_allowance));
         income_titles (3, 2) := income_titles (3, 2) & "Income Related Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (contributory_jobseekers_allowance) /=
          0.0)
      then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           contributory_jobseekers_allowance));
         income_titles (3, 2) := income_titles (3, 2) & "Contributory Jobseekers Allowance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (industrial_injury_disablementBenefit) /=
          0.0)
      then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           industrial_injury_disablementBenefit));
         income_titles (3, 2) := income_titles (3, 2) & "Industrial Injury Disablement Benefit";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (incapacity_benefit) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           incapacity_benefit));
         income_titles (3, 2) := income_titles (3, 2) & "Incapacity Benefit";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (working_families_tax_credit) /=
          0.0)
      then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           working_families_tax_credit));
         income_titles (3, 2) := income_titles (3, 2) & "Working Families Tax Credit";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (new_deal) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (new_deal));
         income_titles (3, 2) := income_titles (3, 2) & "New Deal";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (working_tax_credit) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           working_tax_credit));
         income_titles (3, 2) := income_titles (3, 2) & "Working Tax Credit";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (child_tax_credit) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           child_tax_credit));
         income_titles (3, 2) := income_titles (3, 2) & "Child Tax Credit";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (any_other_benefit) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           any_other_benefit));
         income_titles (3, 2) := income_titles (3, 2) & "Any Other Benefit";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (widows_payment) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (widows_payment));
         income_titles (3, 2) := income_titles (3, 2) & "Widows Payment";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (unemployment_redundancy_insurance) /=
          0.0)
      then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           unemployment_redundancy_insurance));
         income_titles (3, 2) := income_titles (3, 2) & "Unemployment Redundancy Insurance";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (winter_fuel_payments) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           winter_fuel_payments));
         income_titles (3, 2) := income_titles (3, 2) & "Winter Fuel Payments";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (trade_union) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (trade_union));
         income_titles (3, 2) := income_titles (3, 2) & "Trade Union";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (friendly_society_benefits) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           friendly_society_benefits));
         income_titles (3, 2) := income_titles (3, 2) & "Friendly Society Benefits";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (private_sickness_scheme) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           private_sickness_scheme));
         income_titles (3, 2) := income_titles (3, 2) & "Private Sickness Scheme";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (accident_insurance_scheme) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           accident_insurance_scheme));
         income_titles (3, 2) := income_titles (3, 2) & "Accident Insurance Scheme";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (hospital_savings_scheme) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           hospital_savings_scheme));
         income_titles (3, 2) := income_titles (3, 2) & "Hospital Savings Scheme";
      end if;

      if (mhh.benefit_units (3).adults (spouse).incomes (health_insurance) /= 0.0) then
         income_values (3, 2) := income_values (3, 2) &
                                 format_utils.format_with_commas
                                    (mhh.benefit_units (3).adults (spouse).incomes (
           health_insurance));
         income_titles (3, 2) := income_titles (3, 2) & "Health Insurance";
      end if;

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-1-age",
            mhh.benefit_units (3).children (1).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-1-sex",
            mhh.benefit_units (3).children (1).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-1-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).children (1).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-1-relToHoH",
            mhh.benefit_units (3).children (1).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-2-age",
            mhh.benefit_units (3).children (2).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-2-sex",
            mhh.benefit_units (3).children (2).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-2-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).children (2).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-2-relToHoH",
            mhh.benefit_units (3).children (2).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-3-age",
            mhh.benefit_units (3).children (3).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-3-sex",
            mhh.benefit_units (3).children (3).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-3-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).children (3).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-3-relToHoH",
            mhh.benefit_units (3).children (3).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-4-age",
            mhh.benefit_units (3).children (4).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-4-sex",
            mhh.benefit_units (3).children (4).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-4-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).children (4).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-4-relToHoH",
            mhh.benefit_units (3).children (4).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-5-age",
            mhh.benefit_units (3).children (5).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-5-sex",
            mhh.benefit_units (3).children (5).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-5-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).children (5).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-5-relToHoH",
            mhh.benefit_units (3).children (5).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-6-age",
            mhh.benefit_units (3).children (6).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-6-sex",
            mhh.benefit_units (3).children (6).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-6-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).children (6).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-6-relToHoH",
            mhh.benefit_units (3).children (6).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-7-age",
            mhh.benefit_units (3).children (7).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-7-sex",
            mhh.benefit_units (3).children (7).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-7-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).children (7).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-7-relToHoH",
            mhh.benefit_units (3).children (7).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-8-age",
            mhh.benefit_units (3).children (8).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-8-sex",
            mhh.benefit_units (3).children (8).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-8-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).children (8).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-8-relToHoH",
            mhh.benefit_units (3).children (8).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-9-age",
            mhh.benefit_units (3).children (9).age'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-9-sex",
            mhh.benefit_units (3).children (9).sex'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-9-marital-status",
            FRS_Enums.pretty_print (mhh.benefit_units (3).children (9).marital_status));

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("mhh-benefit_units-3-children-9-relToHoH",
            mhh.benefit_units (3).children (9).relToHoH'Img);

      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Capital-3-1",
            format_utils.format_with_commas (output (1) (3).assessable_Capital));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Capital-3-2",
            format_utils.format_with_commas (output (2) (3).assessable_Capital));
      diff             := output (2) (3).assessable_Capital - output (1) (3).assessable_Capital;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("assessable_Capital-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Capital-3-1",
            format_utils.format_with_commas (output (1) (3).excess_Capital));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Capital-3-2",
            format_utils.format_with_commas (output (2) (3).excess_Capital));
      diff             := output (2) (3).excess_Capital - output (1) (3).excess_Capital;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("excess_Capital-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Income-3-1",
            format_utils.format_with_commas (output (1) (3).excess_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("excess_Income-3-2",
            format_utils.format_with_commas (output (2) (3).excess_Income));
      diff             := output (2) (3).excess_Income - output (1) (3).excess_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("excess_Income-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("allowances-3-1",
            format_utils.format_with_commas (output (1) (3).allowances));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("allowances-3-2",
            format_utils.format_with_commas (output (2) (3).allowances));
      diff             := output (2) (3).allowances - output (1) (3).allowances;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("allowances-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Allowances-3-1",
            format_utils.format_with_commas (output (1) (3).capital_Allowances));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Allowances-3-2",
            format_utils.format_with_commas (output (2) (3).capital_Allowances));
      diff             := output (2) (3).capital_Allowances - output (1) (3).capital_Allowances;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("capital_Allowances-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Income-3-1",
            format_utils.format_with_commas (output (1) (3).assessable_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("assessable_Income-3-2",
            format_utils.format_with_commas (output (2) (3).assessable_Income));
      diff             := output (2) (3).assessable_Income - output (1) (3).assessable_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("assessable_Income-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Capital-3-1",
            format_utils.format_with_commas (output (1) (3).disposable_Capital));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Capital-3-2",
            format_utils.format_with_commas (output (2) (3).disposable_Capital));
      diff             := output (2) (3).disposable_Capital - output (1) (3).disposable_Capital;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("disposable_Capital-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Income-3-1",
            format_utils.format_with_commas (output (1) (3).disposable_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("disposable_Income-3-2",
            format_utils.format_with_commas (output (2) (3).disposable_Income));
      diff             := output (2) (3).disposable_Income - output (1) (3).disposable_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("disposable_Income-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("gross_Income-3-1",
            format_utils.format_with_commas (output (1) (3).gross_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("gross_Income-3-2",
            format_utils.format_with_commas (output (2) (3).gross_Income));
      diff             := output (2) (3).gross_Income - output (1) (3).gross_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("gross_Income-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("benefits_In_Kind-3-1",
            format_utils.format_with_commas (output (1) (3).benefits_In_Kind));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("benefits_In_Kind-3-2",
            format_utils.format_with_commas (output (2) (3).benefits_In_Kind));
      diff             := output (2) (3).benefits_In_Kind - output (1) (3).benefits_In_Kind;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("benefits_In_Kind-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("deductions_From_Income-3-1",
            format_utils.format_with_commas (output (1) (3).deductions_From_Income));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("deductions_From_Income-3-2",
            format_utils.format_with_commas (output (2) (3).deductions_From_Income));
      diff             := output (2) (3).deductions_From_Income -
                          output (1) (3).deductions_From_Income;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("deductions_From_Income-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("la_State-3-1", output (1) (3).la_State'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("la_State-3-2", output (2) (3).la_State'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("income_Contribution-3-1",
            format_utils.format_with_commas (output (1) (3).income_Contribution));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("income_Contribution-3-2",
            format_utils.format_with_commas (output (2) (3).income_Contribution));
      diff             := output (2) (3).income_Contribution -
                          output (1) (3).income_Contribution;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("income_Contribution-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Contribution-3-1",
            format_utils.format_with_commas (output (1) (3).capital_Contribution));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("capital_Contribution-3-2",
            format_utils.format_with_commas (output (2) (3).capital_Contribution));
      diff             := output (2) (3).capital_Contribution -
                          output (1) (3).capital_Contribution;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("capital_Contribution-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("housing_Costs-3-1",
            format_utils.format_with_commas (output (1) (3).housing_Costs));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("housing_Costs-3-2",
            format_utils.format_with_commas (output (2) (3).housing_Costs));
      diff             := output (2) (3).housing_Costs - output (1) (3).housing_Costs;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("housing_Costs-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("rent_Share_Deduction-3-1",
            format_utils.format_with_commas (output (1) (3).rent_Share_Deduction));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("rent_Share_Deduction-3-2",
            format_utils.format_with_commas (output (2) (3).rent_Share_Deduction));
      diff             := output (2) (3).rent_Share_Deduction -
                          output (1) (3).rent_Share_Deduction;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("rent_Share_Deduction-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("child_Allowances-3-1",
            format_utils.format_with_commas (output (1) (3).child_Allowances));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("child_Allowances-3-2",
            format_utils.format_with_commas (output (2) (3).child_Allowances));
      diff             := output (2) (3).child_Allowances - output (1) (3).child_Allowances;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("child_Allowances-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           (" partners_Allowances-3-1",
            format_utils.format_with_commas (output (1) (3).partners_Allowances));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           (" partners_Allowances-3-2",
            format_utils.format_with_commas (output (2) (3).partners_Allowances));
      diff             := output (2) (3).partners_Allowances -
                          output (1) (3).partners_Allowances;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc (" partners_Allowances-3-diff", diff'Img);
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("targetting_index-3-1",
            format_utils.format_with_commas (output (1) (3).targetting_index));
      tablePos         := tablePos + 1;
      trans (tablePos) :=
         Templates_Parser.Assoc
           ("targetting_index-3-2",
            format_utils.format_with_commas (output (2) (3).targetting_index));
      diff             := output (2) (3).targetting_index - output (1) (3).targetting_index;
      tablePos         := tablePos + 1;
      trans (tablePos) := Templates_Parser.Assoc ("targetting_index-3-diff", diff'Img);

      -- ======= end autogenerated ==

      for i in  1 .. NUM_DISPLAYED_BENEFIT_UNITS loop
         for j in  1 .. NUM_DISPLAYED_SYSTEMS loop
            tablePos         := tablePos + 1;
            trans (tablePos) :=
               Templates_Parser.Assoc
                 ("income-values-" & format (i) & "-" & format (j),
                  income_values (i, j));
            tablePos         := tablePos + 1;
            trans (tablePos) :=
               Templates_Parser.Assoc
                 ("finance-values-" & format (i) & "-" & format (j),
                  finance_values (i, j));
            tablePos         := tablePos + 1;
            trans (tablePos) :=
               Templates_Parser.Assoc
                 ("expenses-values-" & format (i) & "-" & format (j),
                  expenses_values (i, j));
            tablePos         := tablePos + 1;
            trans (tablePos) :=
               Templates_Parser.Assoc
                 ("income-titles-" & format (i) & "-" & format (j),
                  income_titles (i, j));
            tablePos         := tablePos + 1;
            trans (tablePos) :=
               Templates_Parser.Assoc
                 ("finance-titles-" & format (i) & "-" & format (j),
                  finance_titles (i, j));
            tablePos         := tablePos + 1;
            trans (tablePos) :=
               Templates_Parser.Assoc
                 ("expenses-titles-" & format (i) & "-" & format (j),
                  expenses_titles (i, j));
         end loop;
      end loop;

      for buno in  1 .. NUM_DISPLAYED_BENEFIT_UNITS loop --  only displaying 1st 3 benefit units
         tablePos         := tablePos + 1;
         trans (tablePos) :=
            Templates_Parser.Assoc
              ("num-adults-" & format (buno),
               (Head_Or_Spouse'Pos (mhh.benefit_units (buno).last_adult) + 1));
         tablePos         := tablePos + 1;
         trans (tablePos) :=
            Templates_Parser.Assoc
              ("num-ch-" & format (buno),
               (mhh.benefit_units (buno).num_children));

      end loop;
      trans (tablePos) := Templates_Parser.Assoc ("num-bus", mhh.num_benefit_units);
      --                                 ,
      --                  income_values,
      --                  finance_values,
      --                  expenses_titles,
      --                  finance_titles,
      --                  income_titles
      --                    : Parser_Tag_Array;
      --                  trans( insert_Start_Position+1 ) :=
      --                  Templates_Parser.assoc( "TITLE", titles );
      --                  trans( insert_Start_Position+2 ) :=
      --                  Templates_Parser.assoc( "PRE-VALUE", pre_values );
      --                  trans( insert_Start_Position+3 ) :=
      --                  Templates_Parser.assoc( "POST-VALUE", post_values );

   end make_example_translations_table;

end example_hh_generator;
