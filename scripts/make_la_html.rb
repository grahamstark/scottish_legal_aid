#!/usr/bin/ruby

HTML_TEMPLATE =
'<tr class=\"#{clazz}\"><td align=\"right\" >#{title}</td><td>@_#{key}_@</td></tr>\n';

EXISTS_TEMPLATE = 
'                exists := Exist(params, \"#{key}\");\n';

DIFFERENCES_TEMPLATE = 
'                if (print_all or ( #{defaultVarname} /= #{varname} )) then\n'+
'                        pre_values := pre_values &  #{defaultVarname}\'Img;\n'+
'                        post_values := post_values & #{varname}\'Img;\n'+
'                        titles := titles & \"#{title}\";\n'+
'                end if;\n\n';                        

INSERT_TEMPLATE =
'                tablePos         := tablePos + 1;'+
'                trans( tablePos ) := \n'+
'                        Templates_Parser.Assoc\n'+
'                                (\"#{key}\",\n'+
'                                 To_String (outputStr));\n';
BOOLEAN_TEMPLATE = 
'	        html_utils.makeOneInput\n'+
'                       (varname      => \"#{key}\",\n'+
'                        outputStr    => outputStr,\n'+
'                        value        => #{varname},\n'+
'                        defaultValue => #{defaultVarname},\n'+
'                        option_names => #{labels},\n'+
'                        help         => \"#{help}\",\n'+
'                        paramString  => getStr( params, \"#{key}\" ),\n'+
'                        paramIsSet   => exists\n'+
'                        );\n';

MONEY_TEMPLATE = 
'                html_utils.makeOneInput\n'+
'                       (varname      => \"#{key}\",\n'+
'                        outputStr    => outputStr,\n'+
'                        value        => #{varname},\n'+
'                        defaultValue => #{defaultVarname},\n'+
'                        help         => \"#{help}\",\n'+
'                        paramString  => getStr( params, \"#{key}\" ),\n'+
'                        paramIsSet   => exists,\n'+
'                        min => #{min},\n'+
'                        max => #{max},\n'+
'                        is_error => is_in_error );\n'+
'                has_errors := has_errors or is_in_error;\n';

Adafile =  File.new( 'ada.inc', 'w' ) 
Htmlfile = File.new( 'html.inc', 'w' )
Diffsfile = File.new( 'diffs.inc', 'w' )

def makeExists( key )
        return eval( '"' + EXISTS_TEMPLATE + '"' );
end

def makeInsert( key ) 
        return eval( '"' + INSERT_TEMPLATE + '"' );
end

def makeBoolean( key, varname, defaultVarname, labels, help ) 
        return eval( '"' + BOOLEAN_TEMPLATE + '"' );
end

def makeMoney(key, varname, defaultVarname, help, min, max ) 
        return eval( '"' + MONEY_TEMPLATE + '"' );
end

def makeHTML( clazz, title, key )
        return eval( '"' + HTML_TEMPLATE + '"' );
end

def makeDiffs( title, varname, defaultVarname )
        return eval( '"' + DIFFERENCES_TEMPLATE + '"' );
end
             
def makeVar( clazz, title, name, type, help = '', min=-100000.0, max=100000.0 )
        out = ''
        key = name.clone;
        key = key.strip();
        key = key.gsub( /[\(\),]/, '' );
        key = key.strip();
        key = key.gsub( / +/, '-' );
        key = key.gsub( /[\.]/, '-' );
        key = key.gsub( /--/, '-' );
        
        defaultVarname = 'defaultSys.'+name;
        varname = "lasys.#{name}"
        out += makeExists( key );
        if( type == 'boolean' ) then
                out += makeBoolean( key, varname, defaultVarname, 'EXPENSES_LABELS', help );  
        elsif ( type == 'money' ) then
                max = "Money'Last" if max == 100000.0
                min = "Money'First" if min == -100000.0
                
                out += makeMoney( key, varname, defaultVarname, help, min, max );  
        elsif( type == 'real' )
                max = "Real'Last" if max == 100000.0
                min = "Real'First" if min == -100000.0
                out += makeMoney( key, varname, defaultVarname, help, min, max );
        else
                max = "Modelint'Last" if max == 100000.0
                min = "Modelint'First" if min == -100000.0
                out += makeMoney( key, varname, defaultVarname, help, min, max );  
        end
        out += makeInsert( key )+"\n\n";
        Adafile.write( out );
        out += "\n\n"
        Htmlfile.write( makeHTML( clazz, title, key ) );
        Diffsfile.write( makeDiffs( title, varname, defaultVarname ) );
end;


def tclass( n )
        puts " n = #{n}";
        return (n % 2) == 0 ? 'tableRowEven' : 'tableRowOdd';
end

Adafile.write( "        --   ========= AUTOGENERATED STARTS =======\n" );        
n  = 0
10.times{
        |c|
        n += 1
        makeVar( tclass(n), "Contribution Proportion [#{c+1}]", "contributions(income).contribution_proportion(#{c+1})", 'money', '', 0.0, 1.0  );
        makeVar( tclass(n), "Contribution Band [#{c+1}]", "contributions(income).contribution_band(#{c+1})", 'money' );
}

10.times{
        |c|
        n += 1
        makeVar( tclass(n), "Contribution Proportion [#{c+1}]", "contributions(capital).contribution_proportion(#{c+1})", 'money', '', 0.0, 1.0 );
        makeVar( tclass(n), "Contribution Band [#{c+1}]", "contributions(capital).contribution_band(#{c+1})", 'money' );
}

Adafile.write( "\n        --   ========= AUTOGENERATED ENDS =======\n" );        

Adafile.close
Htmlfile.close
Diffsfile.close
